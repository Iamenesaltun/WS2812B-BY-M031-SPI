; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\system_m031series.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\system_m031series.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=527 -DxxDEBUG_ENABLE_SEMIHOST --omf_browse=.\obj\system_m031series.crf ..\..\..\..\Library\Device\Nuvoton\M031\Source\system_M031Series.c]
                          THUMB

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_u
                          REQUIRE _printf_int_dec
                  SystemCoreClockUpdate PROC
;;;37      */
;;;38     void SystemCoreClockUpdate(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;39     {
;;;40         uint32_t u32Freq, u32ClkSrc;
;;;41         uint32_t u32HclkDiv;
;;;42     
;;;43         u32ClkSrc = CLK->CLKSEL0 & CLK_CLKSEL0_HCLKSEL_Msk;
000002  4e20              LDR      r6,|L1.132|
000004  6930              LDR      r0,[r6,#0x10]
000006  2400              MOVS     r4,#0
000008  0745              LSLS     r5,r0,#29
00000a  a01f              ADR      r0,|L1.136|
00000c  6800              LDR      r0,[r0,#0]
00000e  9000              STR      r0,[sp,#0]
000010  481c              LDR      r0,|L1.132|
000012  0f6d              LSRS     r5,r5,#29
000014  3040              ADDS     r0,r0,#0x40
000016  6800              LDR      r0,[r0,#0]
000018  2105              MOVS     r1,#5
00001a  0409              LSLS     r1,r1,#16
00001c  4208              TST      r0,r1
00001e  d116              BNE      |L1.78|
000020  0301              LSLS     r1,r0,#12             ;39
000022  d501              BPL      |L1.40|
000024  4c19              LDR      r4,|L1.140|
000026  e000              B        |L1.42|
                  |L1.40|
000028  4c19              LDR      r4,|L1.144|
                  |L1.42|
00002a  0381              LSLS     r1,r0,#14             ;39
00002c  d40f              BMI      |L1.78|
00002e  0401              LSLS     r1,r0,#16             ;39
000030  0f89              LSRS     r1,r1,#30             ;39
000032  466a              MOV      r2,sp                 ;39
000034  5c53              LDRB     r3,[r2,r1]            ;39
000036  05c2              LSLS     r2,r0,#23             ;39
000038  0480              LSLS     r0,r0,#18             ;39
00003a  0ec1              LSRS     r1,r0,#27             ;39
00003c  0dd2              LSRS     r2,r2,#23             ;39
00003e  1c89              ADDS     r1,r1,#2              ;39
000040  08a0              LSRS     r0,r4,#2              ;39
000042  1c92              ADDS     r2,r2,#2              ;39
000044  4359              MULS     r1,r3,r1              ;39
000046  4350              MULS     r0,r2,r0              ;39
000048  f7fffffe          BL       __aeabi_uidivmod
00004c  0084              LSLS     r4,r0,#2              ;39
                  |L1.78|
;;;44     
;;;45         /* Update PLL Clock */
;;;46         PllClock = CLK_GetPLLClockFreq();
00004e  4f11              LDR      r7,|L1.148|
;;;47     
;;;48         if(u32ClkSrc != CLK_CLKSEL0_HCLKSEL_PLL)
000050  2d02              CMP      r5,#2
000052  60bc              STR      r4,[r7,#8]  ; PllClock
000054  d002              BEQ      |L1.92|
;;;49         {
;;;50             /* Use the clock sources directly */
;;;51             u32Freq = gau32ClkSrcTbl[u32ClkSrc];
000056  4910              LDR      r1,|L1.152|
000058  00a8              LSLS     r0,r5,#2
00005a  580c              LDR      r4,[r1,r0]
                  |L1.92|
;;;52         }
;;;53         else
;;;54         {
;;;55             /* Use PLL clock */
;;;56             u32Freq = PllClock;
;;;57         }
;;;58     		printf("u32Freq : %u\n",u32Freq);
00005c  a00f              ADR      r0,|L1.156|
00005e  4621              MOV      r1,r4
000060  f7fffffe          BL       __2printf
;;;59     
;;;60         u32HclkDiv = (CLK->CLKDIV0 & CLK_CLKDIV0_HCLKDIV_Msk) + 1;
000064  6a30              LDR      r0,[r6,#0x20]
000066  0701              LSLS     r1,r0,#28
000068  0f09              LSRS     r1,r1,#28
;;;61     
;;;62         /* Update System Core Clock */
;;;63         SystemCoreClock = u32Freq / u32HclkDiv;
00006a  4620              MOV      r0,r4
00006c  1c49              ADDS     r1,r1,#1
00006e  f7fffffe          BL       __aeabi_uidivmod
;;;64     
;;;65         CyclesPerUs = (SystemCoreClock + 500000) / 1000000;
000072  490e              LDR      r1,|L1.172|
000074  6038              STR      r0,[r7,#0]  ; SystemCoreClock
000076  104a              ASRS     r2,r1,#1
000078  1880              ADDS     r0,r0,r2
00007a  f7fffffe          BL       __aeabi_uidivmod
00007e  6078              STR      r0,[r7,#4]  ; CyclesPerUs
;;;66     }
000080  bdf8              POP      {r3-r7,pc}
;;;67     
                          ENDP

000082  0000              DCW      0x0000
                  |L1.132|
                          DCD      0x40000200
                  |L1.136|
000088  01020204          DCB      1,2,2,4
                  |L1.140|
                          DCD      0x00b71b00
                  |L1.144|
                          DCD      0x01e84800
                  |L1.148|
                          DCD      ||.data||
                  |L1.152|
                          DCD      ||.constdata||
                  |L1.156|
00009c  75333246          DCB      "u32Freq : %u\n",0
0000a0  72657120
0000a4  3a202575
0000a8  0a00    
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L1.172|
                          DCD      0x000f4240

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;77      */
;;;78     void SystemInit(void)
000000  b510              PUSH     {r4,lr}
000002  2159              MOVS     r1,#0x59
000004  480a              LDR      r0,|L2.48|
000006  2316              MOVS     r3,#0x16
000008  2288              MOVS     r2,#0x88
                  |L2.10|
00000a  6001              STR      r1,[r0,#0]
00000c  6003              STR      r3,[r0,#0]
00000e  6002              STR      r2,[r0,#0]
000010  6804              LDR      r4,[r0,#0]
000012  2c00              CMP      r4,#0
000014  d0f9              BEQ      |L2.10|
;;;79     {
;;;80         /* Unlock protected registers */
;;;81         SYS_UnlockReg();
;;;82     
;;;83         /* Set HXTGain Level dependend on HXT Frequency */
;;;84         CLK->PWRCTL = CLK->PWRCTL & ~CLK_PWRCTL_HXTGAIN_Msk;
000016  4907              LDR      r1,|L2.52|
000018  680b              LDR      r3,[r1,#0]
00001a  2207              MOVS     r2,#7
00001c  0512              LSLS     r2,r2,#20
00001e  4393              BICS     r3,r3,r2
000020  600b              STR      r3,[r1,#0]
;;;85         if ((__HXT >= FREQ_4MHZ) && (__HXT < FREQ_8MHZ))
;;;86         {
;;;87             CLK->PWRCTL |= (1 << CLK_PWRCTL_HXTGAIN_Pos);
;;;88         }
;;;89         else if ((__HXT >= FREQ_8MHZ) && (__HXT < FREQ_12MHZ))
;;;90         {
;;;91             CLK->PWRCTL |= (2 << CLK_PWRCTL_HXTGAIN_Pos);
;;;92         }
;;;93         else if ((__HXT >= FREQ_12MHZ) && (__HXT < FREQ_16MHZ))
;;;94         {
;;;95             CLK->PWRCTL |= (3 << CLK_PWRCTL_HXTGAIN_Pos);
;;;96         }
;;;97         else if ((__HXT >= FREQ_16MHZ) && (__HXT < FREQ_24MHZ))
;;;98         {
;;;99             CLK->PWRCTL |= (4 << CLK_PWRCTL_HXTGAIN_Pos);
;;;100        }
;;;101        else
;;;102        {
;;;103            CLK->PWRCTL |= (7 << CLK_PWRCTL_HXTGAIN_Pos);
000022  680b              LDR      r3,[r1,#0]
000024  4313              ORRS     r3,r3,r2
000026  600b              STR      r3,[r1,#0]
000028  2100              MOVS     r1,#0
00002a  6001              STR      r1,[r0,#0]
;;;104        }
;;;105    
;;;106        /* Lock protected registers */
;;;107        SYS_LockReg();
;;;108    }
00002c  bd10              POP      {r4,pc}
;;;109    
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      0x40000100
                  |L2.52|
                          DCD      0x40000200

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  gau32ClkSrcTbl
                          DCD      0x01e84800
                          DCD      0x00008000
                          DCD      0x02dc6c00
                          DCD      0x00009600
                          DCD      0x02dc6c00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x02dc6c00

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x02dc6c00
                  CyclesPerUs
                          DCD      0x00000030
                  PllClock
                          DCD      0x02dc6c00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\Device\\Nuvoton\\M031\\Source\\system_M031Series.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_system_M031Series_c_5d646a67____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_system_M031Series_c_5d646a67____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_system_M031Series_c_5d646a67____REVSH|
#line 402
|__asm___19_system_M031Series_c_5d646a67____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
